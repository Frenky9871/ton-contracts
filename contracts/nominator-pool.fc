() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {

    ;;
    ;; Load message metadata
    ;;

    var cs = in_msg_cell.begin_parse();
    var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    slice s_addr = cs~load_msg_addr();
    (int s_addr_wc, int s_addr_hash)  = parse_std_addr(s_addr);
    
    ;;
    ;; Ignore all bounced messages
    ;; NOTE: While this is a strange way to do so, but it would be too complicated and test
    ;;       bounced messages. Much better to have an ability to fix stuff with master key instead.
    ;;

    if (flags & 1) {
        return ();
    }

    ;;
    ;; Load config
    ;;
    
    (int seqno, slice owner, int seed, int accept_stakes, int working_amount, int locked_amount, cell nominators) = load_data();

    ;;
    ;; Parse command
    ;;

    int op = in_msg~load_uint(32);
    if ( ~ op ) {
        op = in_msg~parse_text_command();
    }

    ;;
    ;; Add stake command
    ;;

    if (op == 0x7374616b) {

        ;; Check inputs
        int stake_fee = 1000000000; ;; 1 Gram
        int min_stake = 1000000000; ;; 1 Gram
        int stake = msg_value - stake_fee; ;; New stake
        throw_unless(393, stake >= min_stake); ;; Check if stake is more than minimum required stake
        
       ;; Update global working amount
        working_amount = working_amount + stake;

        ;; Update nominator state
        (int active, int locked) = nominators.get_nominator_data(s_addr_wc, s_addr_hash);
        active = active + stake;
        nominators~set_nominator_data(s_addr_wc, s_addr_hash, active + stake, locked);

        ;; Persist data
        save_data(seqno, owner, seed, accept_stakes, working_amount, locked_amount, nominators);

        ;; Send response
        send_text_stake_accept_message(s_addr, stake);

        return ();
    }

    ;;
    ;; Unable to process message
    ;;

    throw(404);
}

() recv_external(slice in_msg) impure {
    (int seqno, slice owner, int seed, int accept_stakes, int working_amount, int locked_amount, cell nominators) = load_data();

    ;; Deployment message
    if (seqno == 0) {
        seqno = seqno + 1;
        save_data(seqno, owner, seed, accept_stakes, working_amount, locked_amount, nominators);
        accept_message();
    } else {
        throw(100);
    }
}